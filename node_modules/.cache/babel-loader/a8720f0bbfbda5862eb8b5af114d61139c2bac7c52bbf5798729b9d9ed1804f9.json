{"ast":null,"code":"var _jsxFileName = \"/Users/pariketkoirala/i/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const handleSearch = async () => {\n    setLoading(true);\n    setError('');\n    setResults([]);\n    try {\n      const response = await fetch('https://api.openai.com/v1/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer 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` // Replace with your API key\n        },\n        body: JSON.stringify({\n          model: 'text-davinci-003',\n          prompt: `Provide Bible verses related to: \"${query}\".`,\n          max_tokens: 150,\n          temperature: 0.7\n        })\n      });\n      const data = await response.json();\n      if (data.choices) {\n        setResults(data.choices[0].text.trim().split('\\n'));\n      } else {\n        setError('No results found.');\n      }\n    } catch (err) {\n      console.error(err);\n      setError('Failed to fetch data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bible Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      placeholder: \"Enter a keyword...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: results.map((result, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: result\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"keW6MEd3NVUzwh/miDGlKiEcnAs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","query","setQuery","results","setResults","loading","setLoading","error","setError","handleSearch","response","fetch","method","headers","Authorization","body","JSON","stringify","model","prompt","max_tokens","temperature","data","json","choices","text","trim","split","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","result","index","_c","$RefreshReg$"],"sources":["/Users/pariketkoirala/i/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSearch = async () => {\n    setLoading(true);\n    setError('');\n    setResults([]);\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer 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`, // Replace with your API key\n        },\n        body: JSON.stringify({\n          model: 'text-davinci-003',\n          prompt: `Provide Bible verses related to: \"${query}\".`,\n          max_tokens: 150,\n          temperature: 0.7,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.choices) {\n        setResults(data.choices[0].text.trim().split('\\n'));\n      } else {\n        setError('No results found.');\n      }\n    } catch (err) {\n      console.error(err);\n      setError('Failed to fetch data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Bible Search</h1>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        placeholder=\"Enter a keyword...\"\n      />\n      <button onClick={handleSearch}>Search</button>\n      {loading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      <ul>\n        {results.map((result, index) => (\n          <li key={index}>{result}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}